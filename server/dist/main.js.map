{"version":3,"file":"main.js","mappings":"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","sources":["webpack://lireddit/./server/src/config/mongoose.config.ts","webpack://lireddit/./server/src/config/redis.config.ts","webpack://lireddit/./server/src/errors/errors.ts","webpack://lireddit/./server/src/functions/create-server.function.ts","webpack://lireddit/./server/src/generators/graphql-respnse.generator.ts","webpack://lireddit/./server/src/guards/create-post.guard.ts","webpack://lireddit/./server/src/guards/jwt.guard.ts","webpack://lireddit/./server/src/guards/register.guard.ts","webpack://lireddit/./server/src/models/post.model.ts","webpack://lireddit/./server/src/models/user.model.ts","webpack://lireddit/./server/src/models/vote.model.ts","webpack://lireddit/./server/src/modules/app.module.ts","webpack://lireddit/./server/src/modules/global.module.ts","webpack://lireddit/./server/src/modules/post.module.ts","webpack://lireddit/./server/src/modules/user.module.ts","webpack://lireddit/./server/src/resolvers/post.resolver.ts","webpack://lireddit/./server/src/resolvers/user.resolver.ts","webpack://lireddit/./server/src/services/post.service.ts","webpack://lireddit/./server/src/services/user.service.ts","webpack://lireddit/./server/src/strategies/jwt.strategy.ts","webpack://lireddit/./server/src/types/types.ts","webpack://lireddit/./server/src/utils/jwt.utils.ts","webpack://lireddit/./server/src/utils/test.utils.ts","webpack://lireddit/external commonjs \"@liaoliaots/nestjs-redis\"","webpack://lireddit/external commonjs \"@nestjs/apollo\"","webpack://lireddit/external commonjs \"@nestjs/common\"","webpack://lireddit/external commonjs \"@nestjs/config\"","webpack://lireddit/external commonjs \"@nestjs/core\"","webpack://lireddit/external commonjs \"@nestjs/graphql\"","webpack://lireddit/external commonjs \"@nestjs/jwt\"","webpack://lireddit/external commonjs \"@nestjs/mongoose\"","webpack://lireddit/external commonjs \"@nestjs/passport\"","webpack://lireddit/external commonjs \"@nestjs/platform-express\"","webpack://lireddit/external commonjs \"@nestjs/testing\"","webpack://lireddit/external commonjs \"@nestjs/throttler\"","webpack://lireddit/external commonjs \"@ntegral/nestjs-sendgrid\"","webpack://lireddit/external commonjs \"@sendgrid/mail\"","webpack://lireddit/external commonjs \"bcryptjs\"","webpack://lireddit/external commonjs \"faker\"","webpack://lireddit/external commonjs \"graphql-import-files\"","webpack://lireddit/external commonjs \"ioredis\"","webpack://lireddit/external commonjs \"mongodb-memory-server\"","webpack://lireddit/external commonjs \"mongoose\"","webpack://lireddit/external commonjs \"pactum\"","webpack://lireddit/external commonjs \"passport-jwt\"","webpack://lireddit/external commonjs \"tslib\"","webpack://lireddit/external commonjs \"uuid\"","webpack://lireddit/external commonjs \"validator\"","webpack://lireddit/external node-commonjs \"path\"","webpack://lireddit/webpack/bootstrap","webpack://lireddit/./server/src/main.ts"],"sourcesContent":["import { ConfigModule, ConfigService } from \"@nestjs/config\"\nimport { MongooseModule } from \"@nestjs/mongoose\"\nimport { MongoMemoryServer } from \"mongodb-memory-server\"\nimport { isTestEnvironment } from \"../utils/test.utils\"\n\nexport function getMongooseConfig( ) {\n    return MongooseModule.forRootAsync({\n\n        imports: [ ConfigModule ],\n        inject: [ ConfigService ],\n\n        useFactory: async (configService: ConfigService) => {\n            if(isTestEnvironment( )) {\n                const testDB= await MongoMemoryServer.create( )\n\n                return { uri: testDB.getUri( ) }\n            }\n\n            return {\n\n                uri: configService.get(\"MONGODB_URI\"),\n                dbName: \"lireddit\"\n            }\n        }\n    })\n}","import { RedisModule } from \"@liaoliaots/nestjs-redis\"\nimport { ConfigModule, ConfigService } from \"@nestjs/config\"\n\nexport function getRedisConfig( ) {\n    return RedisModule.forRootAsync({\n\n        imports: [ ConfigModule ],\n        inject: [ ConfigService ],\n\n        useFactory: async (configService: ConfigService) => ({\n            config: {\n\n                username: \"default\",\n                password: \"password\",\n                host: configService.get(\"REDIS_DB_HOST\"),\n                port: 13455,\n                onClientReady: client => client.on(\"error\", error => console.error(error))\n            }\n        })\n    })\n}","export const errors= {\n    registrationErrors: {\n\n        emailRegisteredError: \"email is pre-registerd\",\n        usernameRegisteredError: \"username is pre-registered\",\n\n        registrationFailureError: \"failed registering user\"\n    },\n\n    signinErrors: {\n\n        userNotFoundError: \"user not found\",\n        wrongPasswordError: \"password provided was wrong\",\n\n        signinFailureError: \"failed signing in user\"\n    },\n\n    requestResetPasswordErrors: {\n\n        emailNotRegisteredError: \"email is not registered\",\n\n        sendingResetEmailError: \"failed to send reset email\"\n    },\n\n    resetPasswordErrors: {\n\n        resetTokenExpiredError: \"reset token expired\",\n        userNotFoundError: \"user not found\",\n\n        resetPasswordFailureError: \"failed resetting password\"\n    },\n\n    postCRUDErrors: {\n\n        createPostFailedError: \"failed creating post\",\n\n        updatePostFailedError: \"failed updating post\",\n        unauthorizedToUpdateError: \"only the creator can update this post\",\n\n        deletePostFailedError: \"failed deleting post\",\n\n        readPostFailedError: \"failed fetching post\",\n        fetchPostsFailedError: \"failed fetching posts\"\n    },\n\n    voteFailureError: \"failed voting on post\"\n}","import { NestFactory } from \"@nestjs/core\"\nimport { ExpressAdapter, NestExpressApplication } from \"@nestjs/platform-express\"\nimport { isDevEnvironment, isTestEnvironment } from \"../utils/test.utils\"\nimport { appModule } from \"../modules/app.module\"\nimport { INestApplication } from \"@nestjs/common\"\nimport { Test, TestingModule } from \"@nestjs/testing\"\n\nvar app: INestApplication | NestExpressApplication\n\nexport async function createServer(port: number) {\n    try {\n        if(isTestEnvironment( )) {\n            const testingModule: TestingModule= await Test.createTestingModule({\n\n                imports: [ appModule ]\n            }).compile( )\n\n            app= testingModule.createNestApplication( )\n        }\n\n        app= await NestFactory.create<NestExpressApplication>(\n            appModule, new ExpressAdapter( ), { cors: true }\n        )\n\n        await app.init( )\n\n        app.listen(\n            port, ( ) => isDevEnvironment( ) && console.info(`server started at port ${ port }`)\n        )\n\n        return app\n    } catch(error) { console.error(error) }\n}","import { Field, ObjectType, ReturnTypeFuncValue } from \"@nestjs/graphql\"\n\nexport function createGraphQLResponse<T>(dataType: ReturnTypeFuncValue, dataFieldName: string) {\n\n    @ObjectType({ isAbstract: true })\n    abstract class graphQLResponse {\n\n        @Field(( ) => String, { nullable: true })\n        error?: string\n\n        @Field(( ) => dataType, { nullable: true, name: dataFieldName })\n        data?: T\n    }\n\n    return graphQLResponse\n}","import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\"\nimport { GqlExecutionContext } from \"@nestjs/graphql\"\nimport { createPostParameters } from \"../types/types\"\n\n@Injectable( )\nexport class createPostGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n\n        const { title, description }= GqlExecutionContext.create(context)\n            .getArgs<{ parameters: createPostParameters }>( )\n            .parameters\n\n        if(\n            title.length < 2 ||\n            description.length < 2\n        )\n            throw new Error( )\n\n        else return true\n    }\n}","import { ExecutionContext, Injectable, UnauthorizedException } from \"@nestjs/common\"\nimport { GqlExecutionContext } from \"@nestjs/graphql\"\nimport { AuthGuard } from \"@nestjs/passport\"\nimport { Observable } from \"rxjs\"\n\n@Injectable( )\nexport class JWTGuard extends AuthGuard(\"jwt\") {\n    getRequest(context: ExecutionContext) {\n        const ctx = GqlExecutionContext.create(context)\n\n        return ctx.getContext( ).req\n    }\n\n    canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean> {\n        return super.canActivate(context)\n    }\n\n    handleRequest(error: any, user: any) {\n        if(error || !user)\n            throw error || new UnauthorizedException( )\n\n        else return user\n    }\n}","import { CanActivate, ExecutionContext, Injectable } from \"@nestjs/common\"\nimport { GqlExecutionContext } from \"@nestjs/graphql\"\nimport { registerParameters } from \"../types/types\"\nimport validator from \"validator\"\n\n@Injectable( )\nexport class registerGuard implements CanActivate {\n    canActivate(context: ExecutionContext): boolean {\n\n        const { email, password, username }= GqlExecutionContext.create(context)\n            .getArgs<{ parameters: registerParameters }>( )\n            .parameters\n\n        if(\n            username.length < 4 ||\n            ! validator.isAlphanumeric(username) ||\n            ! validator.isEmail(email) ||\n            password.length < 4\n        )\n            throw new Error( )\n\n        else return true\n    }\n}","import { Field, ObjectType, GraphQLISODateTime, Int, ID } from \"@nestjs/graphql\"\nimport { Prop, Schema } from \"@nestjs/mongoose\"\nimport { SchemaTypes } from \"mongoose\"\nimport { userEntity } from \"./user.model\"\n\n@ObjectType({ isAbstract: true })\n@Schema( )\nexport class postEntity {\n\n    @Field(( ) => ID)\n    _id: string\n\n    @Field(( ) => String)\n    @Prop({ type: String, required: true })\n    title: string\n\n    @Field(( ) => String)\n    @Prop({ type: String, required: true })\n    description: string\n\n    @Field(( ) => userEntity)\n    @Prop({ type: SchemaTypes.ObjectId, ref: userEntity.name })\n    creator: userEntity\n\n    @Field(( ) => Int)\n    @Prop({ type: Number, default: 0 })\n    points: number\n\n    @Field(( ) => Int, { nullable: true })\n    voteStatus: number | null\n\n    @Field(( ) => GraphQLISODateTime)\n    @Prop({ type: Date, default: new Date( ) })\n    createdAt: Date\n\n    @Field(( ) => GraphQLISODateTime)\n    @Prop({ type: Date, default: new Date( ) })\n    updatedAt: Date\n}","import { Field, ID, ObjectType } from \"@nestjs/graphql\"\nimport { Prop, Schema } from \"@nestjs/mongoose\"\n\n@ObjectType( )\n@Schema( )\nexport class userEntity {\n\n    @Field(( ) => ID)\n    _id: string\n\n    @Field(( ) => String)\n    @Prop({ type: String, required: true, unique: true })\n    username: string\n\n    @Field(( ) => String)\n    @Prop({ type: String, unique: true, required: true })\n    email: string\n\n    @Prop({ type: String, required: true })\n    password: string\n}","import { Field, ID, Int, ObjectType } from \"@nestjs/graphql\"\nimport { Prop, Schema } from \"@nestjs/mongoose\"\nimport { Types } from \"mongoose\"\nimport { postEntity } from \"./post.model\"\nimport { userEntity } from \"./user.model\"\n\n@ObjectType( )\n@Schema( )\nexport class voteEntity {\n\n    @Field(( ) => ID)\n    _id: string\n\n    @Field(( ) => String)\n    @Prop({ type: Types.ObjectId, ref: userEntity.name, required: true })\n    userID: string\n\n    @Field(( ) => String)\n    @Prop({ type: Types.ObjectId, ref: postEntity.name, required: true })\n    postID: string\n\n    @Field(( ) => Int)\n    @Prop({ type: Number, required: true, enum: [-1, 1] })\n    value: number\n}","import { Module } from \"@nestjs/common\"\nimport { ConfigModule, ConfigService } from \"@nestjs/config\"\nimport { GraphQLModule } from \"@nestjs/graphql\"\nimport { ThrottlerModule } from \"@nestjs/throttler\"\nimport { join } from \"path\"\nimport { getMongooseConfig } from \"../config/mongoose.config\"\nimport { getRedisConfig } from \"../config/redis.config\"\nimport { isDevEnvironment } from \"../utils/test.utils\"\nimport { userModule } from \"./user.module\"\nimport { SendGridModule } from \"@ntegral/nestjs-sendgrid\"\nimport { ApolloDriver, ApolloDriverConfig } from \"@nestjs/apollo\"\nimport { postModule } from \"./post.module\"\nimport { globalModule } from \"./global.module\"\n\n@Module({\n\n    imports: [\n        ConfigModule.forRoot({ envFilePath: join(process.env.PWD, \".env\"), isGlobal: true }),\n\n        getMongooseConfig( ),\n\n        GraphQLModule.forRoot<ApolloDriverConfig>({\n\n            driver: ApolloDriver,\n            autoSchemaFile: isDevEnvironment( ) ? join(process.env.PWD, \"server/src/graphql/schema.graphql\") : true,\n            context: ({ req, res }) => ({ req, res }),\n            sortSchema: true\n        }),\n\n        ThrottlerModule.forRoot({ limit: 10, ttl: 60 }),\n\n        getRedisConfig( ),\n\n        SendGridModule.forRootAsync({\n\n            imports: [ ConfigModule ],\n            inject: [ ConfigService ],\n            useFactory: (configService: ConfigService) => ({\n\n                apiKey: configService.get(\"SENDGRID_API_KEY\")\n            })\n        }),\n\n        globalModule,\n\n        userModule,\n        postModule\n    ]\n})\nexport class appModule { }","import { Global, Module } from \"@nestjs/common\"\nimport { ConfigModule, ConfigService } from \"@nestjs/config\"\nimport { JwtModule } from \"@nestjs/jwt\"\nimport { JWTUtils } from \"../utils/jwt.utils\"\n\n@Global( )\n@Module({\n\n    imports: [\n        JwtModule.registerAsync({\n\n            imports: [ ConfigModule ],\n            inject: [ ConfigService ],\n\n            useFactory: (configService: ConfigService) => ({\n\n                expiresIn: \"30d\",\n                secret: configService.get(\"JWT_SECRET\")\n            })\n        })\n    ],\n\n    providers: [ JWTUtils ],\n\n    exports: [ JwtModule, JWTUtils ]\n})\nexport class globalModule { }","import { Module } from \"@nestjs/common\"\nimport { MongooseModule, SchemaFactory } from \"@nestjs/mongoose\"\nimport { postEntity } from \"../models/post.model\"\nimport { voteEntity } from \"../models/vote.model\"\nimport { postResolver } from \"../resolvers/post.resolver\"\nimport { postService } from \"../services/post.service\"\nimport { JWTStrategy } from \"../strategies/jwt.strategy\"\nimport { userModule } from \"./user.module\"\n\n@Module({\n\n    imports: [\n        MongooseModule.forFeature([\n            {\n                name: postEntity.name,\n                schema: SchemaFactory.createForClass(postEntity)\n            },\n            {\n                name: voteEntity.name,\n                schema: SchemaFactory.createForClass(voteEntity)\n            }\n        ]),\n\n        userModule\n    ],\n\n    providers: [ postResolver, postService, JWTStrategy ]\n})\nexport class postModule { }","import { Module } from \"@nestjs/common\"\nimport { ConfigModule, ConfigService } from \"@nestjs/config\"\nimport { JwtModule } from \"@nestjs/jwt\"\nimport { MongooseModule, SchemaFactory } from \"@nestjs/mongoose\"\nimport { genSalt, hash } from \"bcryptjs\"\nimport { userEntity } from \"../models/user.model\"\nimport { userResolver } from \"../resolvers/user.resolver\"\nimport { userService } from \"../services/user.service\"\n\n@Module({\n\n    imports: [\n        MongooseModule.forFeatureAsync([{\n\n            name: userEntity.name,\n            useFactory: ( ) => {\n                const schema= SchemaFactory.createForClass(userEntity)\n\n                schema.pre<userEntity>(\"save\", async function( ) {\n\n                    this.password= await hash(this.password, await genSalt( ))\n                })\n\n                return schema\n            }\n        }]),\n\n        JwtModule.registerAsync({\n\n            imports: [ ConfigModule ],\n            inject: [ ConfigService ],\n\n            useFactory: (configService: ConfigService) => ({\n\n                expiresIn: \"30d\",\n                secret: configService.get(\"JWT_SECRET\")\n            })\n        })\n    ],\n\n    providers: [ userResolver, userService ],\n\n    exports: [ MongooseModule ]\n})\nexport class userModule { }","import { Injectable, UseGuards } from \"@nestjs/common\"\nimport { Args, Context, Int, Mutation, Query, ResolveField, Resolver, Root } from \"@nestjs/graphql\"\nimport { postEntity } from \"../models/post.model\"\nimport { createPostParameters, deletePostParameters, fetchPostParameters, fetchPostResponse, fetchPostsParameters, fetchPostsResponse, operationResponse, updatePostParameters, voteParameters } from \"../types/types\"\nimport { postService } from \"../services/post.service\"\nimport { graphQLContext } from \"../types/context.type\"\nimport { createPostGuard } from \"../guards/create-post.guard\"\nimport { JWTGuard } from \"../guards/jwt.guard\"\n\n@Injectable( )\n@Resolver(( ) => postEntity)\nexport class postResolver {\n    constructor(private readonly postService: postService) { }\n\n    @ResolveField(( ) => Int, { nullable: true })\n    async voteStatus(@Root( ) post: postEntity, @Context( ) context: graphQLContext): Promise<number> {\n        return this.postService.resolveVoteStatus(post, context)\n    }\n\n    @Mutation(( ) => operationResponse)\n    @UseGuards(JWTGuard)\n    @UseGuards(createPostGuard)\n    createPost(@Args(\"parameters\") parameters: createPostParameters, @Context( ) context: graphQLContext): Promise<operationResponse> {\n        return this.postService.createPost(parameters, context)\n    }\n\n    @Query(( ) => fetchPostResponse)\n    @UseGuards(JWTGuard)\n    fetchPost(@Args(\"parameters\") parameters: fetchPostParameters): Promise<fetchPostResponse> {\n        return this.postService.fetchPost(parameters)\n    }\n\n    @Query(( ) => fetchPostsResponse)\n    @UseGuards(JWTGuard)\n    fetchPosts(@Args(\"parameters\") parameters: fetchPostsParameters): Promise<fetchPostsResponse> {\n        return this.postService.fetchPosts(parameters)\n    }\n\n    @Mutation(( ) => operationResponse)\n    @UseGuards(JWTGuard)\n    @UseGuards(createPostGuard)\n    updatePost(@Args(\"parameters\") parameters: updatePostParameters, @Context( ) context: graphQLContext): Promise<operationResponse> {\n        return this.postService.updatePost(parameters, context)\n    }\n\n    @Mutation(( ) => operationResponse)\n    @UseGuards(JWTGuard)\n    deletePost(@Args(\"parameters\") parameters: deletePostParameters, @Context( ) context: graphQLContext): Promise<operationResponse> {\n        return this.postService.deletePost(parameters, context)\n    }\n\n    @Mutation(( ) => operationResponse)\n    @UseGuards(JWTGuard)\n    vote(@Args(\"parameters\") parameters: voteParameters, @Context( ) context: graphQLContext): Promise<operationResponse> {\n        return this.postService.vote(parameters, context)\n    }\n}","import { Injectable, UseGuards } from \"@nestjs/common\"\nimport { Args, Mutation, Query, Resolver } from \"@nestjs/graphql\"\nimport { registerGuard } from \"../guards/register.guard\"\nimport { userEntity } from \"../models/user.model\"\nimport { registerParameters, authResponse, signinParameters, operationResponse, requestResetPasswordParameters, resetPasswordParameters } from \"../types/types\"\nimport { userService } from \"../services/user.service\"\n\n@Injectable( )\n@Resolver(( ) => userEntity)\nexport class userResolver {\n    constructor(private readonly userService: userService) { }\n\n    @Mutation(( ) => authResponse)\n    @UseGuards(registerGuard)\n    register(@Args(\"parameters\") parameters: registerParameters): Promise<authResponse> {\n        return this.userService.register(parameters)\n    }\n\n    @Query(( ) => authResponse)\n    signin(@Args(\"parameters\") parameters: signinParameters): Promise<authResponse> {\n        return this.userService.signin(parameters)\n    }\n\n    @Query(( ) => operationResponse)\n    requestResetPassword(@Args(\"parameters\") parameters: requestResetPasswordParameters): Promise<operationResponse> {\n        return this.userService.requestResetPassword(parameters)\n    }\n\n    @Mutation(( ) => operationResponse)\n    resetPassword(@Args(\"parameters\") parameters: resetPasswordParameters): Promise<operationResponse> {\n        return this.userService.resetPassword(parameters)\n    }\n}","import { Injectable } from \"@nestjs/common\"\nimport { InjectModel } from \"@nestjs/mongoose\"\nimport { postEntity } from \"../models/post.model\"\nimport { Document, Model } from \"mongoose\"\nimport { createPostParameters, deletePostParameters, fetchPostParameters, fetchPostResponse, fetchPostsParameters, fetchPostsResponse, operationResponse, updatePostParameters, voteParameters } from \"../types/types\"\nimport { graphQLContext } from \"../types/context.type\"\nimport { errors } from \"../errors/errors\"\nimport { JWTUtils } from \"../utils/jwt.utils\"\nimport { voteEntity } from \"../models/vote.model\"\n\n@Injectable( )\nexport class postService {\n    constructor(\n        @InjectModel(postEntity.name) private readonly postModel: Model<postEntity & Document>,\n        @InjectModel(voteEntity.name) private readonly voteModel: Model<voteEntity & Document>,\n        private readonly jwtUtils: JWTUtils\n    )\n    { }\n\n    async createPost(parameters: createPostParameters, { req }: graphQLContext): Promise<operationResponse> {\n        try {\n            const creatorID= this.jwtUtils.parseUserID(req)\n\n            await this.postModel.create({\n\n                ...parameters,\n                creator: creatorID\n            })\n\n            return { data: true }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.postCRUDErrors.createPostFailedError }\n        }\n    }\n\n    async fetchPost(parameters: fetchPostParameters): Promise<fetchPostResponse> {\n        try {\n            const post= await this.postModel.findById(parameters._id).populate(\"creator\", { username: 1 })\n\n            if(!post)\n                return { }\n\n            else return { data: post }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.postCRUDErrors.readPostFailedError }\n        }\n    }\n\n    async fetchPosts(parameters: fetchPostsParameters): Promise<fetchPostsResponse> {\n        try {\n            const posts= await this.postModel.find({ })\n                .sort({ updatedAt: -1 })\n                .skip(parameters.offset)\n                .limit(parameters.limit)\n                .populate(\"creator\", { _id: 1, username: 1 })\n\n            return { data: posts }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.postCRUDErrors.fetchPostsFailedError }\n        }\n    }\n\n    async updatePost(parameters: updatePostParameters, { req }: graphQLContext): Promise<operationResponse> {\n        try {\n            const creatorID= this.jwtUtils.parseUserID(req)\n\n            const postDocument= await this.postModel.findById(parameters._id)\n\n            if(postDocument.creator !== creatorID)\n                return { error: errors.postCRUDErrors.unauthorizedToUpdateError }\n\n            await postDocument.updateOne({ $set: { ...parameters, updatedAt: new Date( ) }})\n\n            return { data: true }\n        } catch(error){\n            console.error(error)\n\n            return { error: errors.postCRUDErrors.updatePostFailedError }\n        }\n    }\n\n    async deletePost(parameters: deletePostParameters, { req }: graphQLContext) {\n        try {\n            const creatorID= this.jwtUtils.parseUserID(req)\n\n            await this.postModel.findOneAndDelete({ _id: parameters._id, creator: creatorID })\n\n            return { data: true }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.postCRUDErrors.deletePostFailedError }\n        }\n    }\n\n    async vote(parameters: voteParameters, { req }: graphQLContext): Promise<operationResponse> {\n        try {\n            const userID= this.jwtUtils.parseUserID(req)\n\n            const voteDocument= await this.voteModel.findOne({ postID: parameters.postID, userID }, { _id: 1, value: 1 }),\n                postDocument= await this.postModel.findById(parameters.postID, { _id: 1, points: 1 })\n\n            //* filter parameters\n            {\n                if(! postDocument)\n                    return { error: \"post not found\" }\n\n                else if(parameters.value > 0)\n                    parameters.value= 1\n\n                else if(parameters.value < 0)\n                    parameters.value= -1\n            }\n\n            if(!voteDocument) {\n                await this.voteModel.create({\n\n                    ...parameters,\n                    userID\n                })\n\n                await postDocument.updateOne({ $inc: { points: parameters.value }})\n            }\n\n            else if(parameters.value !== voteDocument.value) {\n                await voteDocument.updateOne({ $set: { value: parameters.value }})\n\n                await postDocument.updateOne({ $inc: { points: 2 * parameters.value }})\n            }\n\n            return { data: true }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.voteFailureError }\n        }\n    }\n\n    async resolveVoteStatus(post: postEntity, { req }: graphQLContext): Promise<number> {\n        try {\n            const userID= this.jwtUtils.parseUserID(req)\n\n            const voteDocument= await this.voteModel.findOne({ userID, postID: post._id.toString( ) })\n\n            return voteDocument ? voteDocument.value: 0\n        } catch(error) {\n            console.error(error)\n\n            return 0\n        }\n    }\n}","import { Injectable } from \"@nestjs/common\"\nimport { InjectModel } from \"@nestjs/mongoose\"\nimport { userEntity } from \"../models/user.model\"\nimport { Document, Model } from \"mongoose\"\nimport { registerParameters, authResponse, signinParameters, requestResetPasswordParameters, operationResponse, resetPasswordParameters } from \"../types/types\"\nimport { errors } from \"../errors/errors\"\nimport validator from \"validator\"\nimport { compare, genSalt, hash } from \"bcryptjs\"\nimport { InjectRedis } from \"@liaoliaots/nestjs-redis\"\nimport { Redis } from \"ioredis\"\nimport { v4 } from \"uuid\"\nimport { MailService } from \"@sendgrid/mail\"\nimport { isTestEnvironment } from \"../utils/test.utils\"\nimport { InjectSendGrid } from \"@ntegral/nestjs-sendgrid\"\nimport { JWTUtils } from \"../utils/jwt.utils\"\n\n@Injectable( )\nexport class userService {\n    constructor(\n        @InjectModel(userEntity.name) private readonly userModel: Model<userEntity & Document>,\n        @InjectRedis( ) private readonly redisClient: Redis,\n        @InjectSendGrid( ) private readonly mailService: MailService,\n        private readonly jwtUtils: JWTUtils\n    )\n    { }\n\n    async register(parameters: registerParameters): Promise<authResponse> {\n        try {\n            let existingUser= await this.userModel.findOne({ email: parameters.email }, { email: 1 })\n\n            if(existingUser)\n                return { error: errors.registrationErrors.emailRegisteredError }\n\n            existingUser= await this.userModel.findOne({ username: parameters.username }, { username: 1 })\n\n            if(existingUser)\n                return { error: errors.registrationErrors.usernameRegisteredError }\n\n            const newUser= await this.userModel.create(parameters)\n\n            return {\n\n                data: { _id: newUser._id, username: newUser.username },\n                accessToken: await this.jwtUtils.createAccessToken(newUser._id.toString( ))\n            }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.registrationErrors.registrationFailureError }\n        }\n    }\n\n    async signin(parameters: signinParameters): Promise<authResponse> {\n        try {\n            const existingUser= await this.userModel.findOne(\n\n                validator.isEmail(parameters.identifier) ? { email: parameters.identifier }: { username: parameters.identifier },\n                { _id: 1, password: 1, username: 1 }\n            )\n\n            if(!existingUser)\n                return { error: errors.signinErrors.userNotFoundError }\n\n            else if(\n                ! await compare(parameters.password, existingUser.password)\n            )\n                return { error: errors.signinErrors.wrongPasswordError }\n\n            return {\n\n                data: { _id: existingUser._id, username: existingUser.username },\n                accessToken: await this.jwtUtils.createAccessToken(existingUser._id.toString( ))\n            }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.signinErrors.signinFailureError }\n        }\n    }\n\n    async requestResetPassword(parameters: requestResetPasswordParameters): Promise<operationResponse> {\n        try {\n            const existingUser= await this.userModel.findOne({ email: parameters.email }, { email: 1, _id: 1 })\n\n            if(!existingUser)\n                return { error: errors.requestResetPasswordErrors.emailNotRegisteredError }\n\n            const resetToken= v4( )\n\n            await this.redisClient.set(\n                resetToken, existingUser._id.toString( ), \"ex\", 24 * 60 * 60 * 1000\n            )\n\n            if(! isTestEnvironment( )) {\n                const mailingResult= await this.mailService.send({\n\n                    to: parameters.email,\n                    from: \"archi.procoder@gmail.com\",\n                    subject: \"Password reset link\",\n                    text: \"Click on the link to reset your password. The link is valid for next 24 hours :\",\n                    html: `<a href= \"http://localhost:4200/reset-password/${ resetToken }\">reset password link</a>`\n                })\n\n                console.info(mailingResult)\n            }\n\n            return { data: true }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.requestResetPasswordErrors.sendingResetEmailError }\n        }\n    }\n\n    async resetPassword(parameters: resetPasswordParameters): Promise<operationResponse> {\n        try {\n            const userID= await this.redisClient.get(parameters.resetToken)\n\n            if(! userID)\n                return { error: errors.resetPasswordErrors.resetTokenExpiredError }\n\n            const existingUser= await this.userModel.findById(userID)\n\n            if(! existingUser)\n                return { error: errors.resetPasswordErrors.userNotFoundError }\n\n            await existingUser.updateOne({ $set: { password: await hash(parameters.newPassword, await genSalt( )) }})\n\n            await this.redisClient.del(parameters.resetToken)\n\n            return { data: true }\n        } catch(error) {\n            console.error(error)\n\n            return { error: errors.resetPasswordErrors.resetPasswordFailureError }\n        }\n    }\n}","import { PassportStrategy } from \"@nestjs/passport\"\nimport { ExtractJwt, Strategy } from \"passport-jwt\"\nimport { ConfigService } from \"@nestjs/config\"\nimport { Injectable } from \"@nestjs/common\"\nimport { InjectModel } from \"@nestjs/mongoose\"\nimport { userEntity } from \"../models/user.model\"\nimport { Model, Document } from \"mongoose\"\n\n@Injectable( )\nexport class JWTStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        protected readonly configService: ConfigService,\n        @InjectModel(userEntity.name) private readonly userModel: Model<Document & userEntity>\n    )\n    {\n        super({\n\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken( ),\n            secretOrKey: configService.get(\"JWT_SECRET\")\n        })\n    }\n\n    async validate(payload: string) {\n        return await this.userModel.findById(payload)\n    }\n}","import { Field, InputType, Int, ObjectType, PickType } from \"@nestjs/graphql\"\nimport { createGraphQLResponse } from \"../generators/graphql-respnse.generator\"\nimport { postEntity } from \"../models/post.model\"\nimport { userEntity } from \"../models/user.model\"\nimport { voteEntity } from \"../models/vote.model\"\n\n@InputType( )\nexport class registerParameters extends PickType(userEntity, [\"username\", \"email\"], InputType) {\n\n    @Field(( ) => String)\n    password: string\n}\n\n@InputType( )\nexport class signinParameters {\n\n    @Field(( ) => String)\n    identifier: string\n\n    @Field(( ) => String)\n    password: string\n}\n\n@InputType( )\nexport class requestResetPasswordParameters extends PickType(userEntity, [\"email\"], InputType) { }\n\n@InputType( )\nexport class resetPasswordParameters {\n\n    @Field(( ) => String)\n    resetToken: string\n\n    @Field(( ) => String)\n    newPassword: string\n}\n\n@InputType( )\nexport class createPostParameters extends PickType(postEntity, [\"title\", \"description\"], InputType) { }\n\n@InputType( )\nexport class fetchPostParameters extends PickType(postEntity, [\"_id\"], InputType) { }\n\n@InputType( )\nexport class fetchPostsParameters {\n\n    @Field(( ) => Int, { defaultValue: 5 })\n    limit: number\n\n    @Field(( ) => Int, { defaultValue: 0 })\n    offset: number\n}\n\n@InputType( )\nexport class updatePostParameters extends PickType(postEntity, [\"_id\", \"title\", \"description\"], InputType) { }\n\n@InputType( )\nexport class deletePostParameters extends PickType(postEntity, [\"_id\"], InputType) { }\n\n@InputType( )\nexport class voteParameters extends PickType(voteEntity, [\"postID\", \"value\"], InputType) { }\n\n@ObjectType( )\nexport class userDetails extends PickType(userEntity, [\"_id\", \"username\"], ObjectType) { }\n\n@ObjectType( )\nexport class authResponse extends createGraphQLResponse<userDetails>(userDetails, \"userDetails\") {\n\n    @Field(( ) => String, { nullable: true })\n    accessToken?: string\n}\n\n@ObjectType( )\nexport class operationResponse extends createGraphQLResponse<boolean>(Boolean, \"operationResult\") { }\n\n@ObjectType( )\nexport class fetchPostResponse extends createGraphQLResponse<postEntity>(postEntity, \"post\") { }\n\n@ObjectType( )\nexport class fetchPostsResponse extends createGraphQLResponse<postEntity[ ]>([postEntity], \"posts\") { }","import { Injectable } from \"@nestjs/common\"\nimport { JwtService } from \"@nestjs/jwt\"\n\n@Injectable( )\nexport class JWTUtils {\n    constructor(private readonly jwtService: JwtService) { }\n\n    parseUserID(req: Request & { headers: { [key: string]: string }}) {\n\n        return this.jwtService.decode(\n            req.headers.authorization.split(\" \")[1]\n        )\n    }\n\n    createAccessToken(payload: string | object): Promise<string> {\n        return this.jwtService.signAsync(payload)\n    }\n}","import { internet, name } from \"faker\"\nimport { loadFile } from \"graphql-import-files\"\nimport { spec } from \"pactum\"\n\nexport const isTestEnvironment= ( ) => process.env.NODE_ENV === \"test\"\n\nexport const isDevEnvironment= ( ) => process.env.NODE_ENV === \"development\"\n\nexport const loadGraphQLFile= (subpath: string) => loadFile(`graphql/${ subpath }.graphql`)\n\nexport const createTestUser= ( ) => ({\n\n    username: name.firstName( ) + name.lastName( ),\n    email: internet.email( ),\n    password: internet.password(6)\n})\n\nexport async function executeRequest<T>(graphQLQuery: string, parameters: T, field: string) {\n\n    const response= await spec( )\n        .post(\"http://localhost:5000/graphql\")\n        .withGraphQLQuery(graphQLQuery)\n        .withGraphQLVariables({ parameters })\n        .expectStatus(200)\n        .toss( )\n\n    return response.body.data[field]\n}","module.exports = require(\"@liaoliaots/nestjs-redis\");","module.exports = require(\"@nestjs/apollo\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/graphql\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/testing\");","module.exports = require(\"@nestjs/throttler\");","module.exports = require(\"@ntegral/nestjs-sendgrid\");","module.exports = require(\"@sendgrid/mail\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"faker\");","module.exports = require(\"graphql-import-files\");","module.exports = require(\"ioredis\");","module.exports = require(\"mongodb-memory-server\");","module.exports = require(\"mongoose\");","module.exports = require(\"pactum\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"validator\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { createServer } from \"./functions/create-server.function\"\n\ncreateServer(parseInt(process.env.PORT) || 4000)"],"names":["MongooseModule","forRootAsync","imports","ConfigModule","inject","ConfigService","useFactory","configService","isTestEnvironment","uri","MongoMemoryServer","create","getUri","get","dbName","RedisModule","config","username","password","host","port","onClientReady","client","on","error","console","errors","registrationErrors","emailRegisteredError","usernameRegisteredError","registrationFailureError","signinErrors","userNotFoundError","wrongPasswordError","signinFailureError","requestResetPasswordErrors","emailNotRegisteredError","sendingResetEmailError","resetPasswordErrors","resetTokenExpiredError","resetPasswordFailureError","postCRUDErrors","createPostFailedError","updatePostFailedError","unauthorizedToUpdateError","deletePostFailedError","readPostFailedError","fetchPostsFailedError","voteFailureError","app","testingModule","Test","createTestingModule","appModule","compile","createNestApplication","NestFactory","ExpressAdapter","cors","init","listen","isDevEnvironment","info","dataType","dataFieldName","graphQLResponse","Field","String","nullable","name","ObjectType","isAbstract","createPostGuard","canActivate","context","GqlExecutionContext","getArgs","parameters","title","length","description","Error","Injectable","JWTGuard","AuthGuard","getRequest","getContext","req","super","handleRequest","user","UnauthorizedException","registerGuard","isAlphanumeric","isEmail","email","postEntity","ID","Prop","type","required","userEntity","SchemaTypes","ObjectId","ref","Int","Number","default","GraphQLISODateTime","Date","Schema","unique","voteEntity","Types","enum","Module","forRoot","envFilePath","join","process","env","PWD","isGlobal","getMongooseConfig","GraphQLModule","driver","ApolloDriver","autoSchemaFile","res","sortSchema","ThrottlerModule","limit","ttl","getRedisConfig","SendGridModule","apiKey","globalModule","userModule","postModule","Global","JwtModule","registerAsync","expiresIn","secret","providers","JWTUtils","exports","forFeature","schema","SchemaFactory","createForClass","postResolver","postService","JWTStrategy","forFeatureAsync","pre","this","hash","genSalt","userResolver","userService","constructor","voteStatus","post","resolveVoteStatus","createPost","fetchPost","fetchPosts","updatePost","deletePost","vote","ResolveField","Root","Context","graphQLContext","Promise","Mutation","operationResponse","UseGuards","Args","createPostParameters","Query","fetchPostResponse","fetchPostParameters","fetchPostsResponse","fetchPostsParameters","updatePostParameters","deletePostParameters","voteParameters","Resolver","register","signin","requestResetPassword","resetPassword","authResponse","registerParameters","signinParameters","requestResetPasswordParameters","resetPasswordParameters","postModel","voteModel","jwtUtils","creatorID","parseUserID","creator","data","findById","_id","populate","find","sort","updatedAt","skip","offset","postDocument","updateOne","$set","findOneAndDelete","userID","voteDocument","findOne","postID","value","points","$inc","toString","InjectModel","Model","userModel","redisClient","mailService","existingUser","newUser","accessToken","createAccessToken","identifier","compare","resetToken","v4","set","mailingResult","send","to","from","subject","text","html","newPassword","del","InjectRedis","InjectSendGrid","Redis","MailService","PassportStrategy","Strategy","jwtFromRequest","ExtractJwt","fromAuthHeaderAsBearerToken","secretOrKey","validate","payload","PickType","InputType","defaultValue","userDetails","createGraphQLResponse","Boolean","jwtService","decode","headers","authorization","split","signAsync","JwtService","loadGraphQLFile","subpath","loadFile","createTestUser","firstName","lastName","internet","graphQLQuery","field","spec","withGraphQLQuery","withGraphQLVariables","expectStatus","toss","body","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","createServer","parseInt","PORT"],"sourceRoot":""}